@using JobBoardPlatform.PL.ViewModels.OfferViewModels.Company;

@model CompanyApplicationsViewModel
@{
    var offerCard = Model.OfferCard;
    var applicationCards = Model.Applications;

    // TODO: move build query to the class
    string query = "";
    var values = new bool[] { Model.IsIncludeUnseen, Model.IsIncludeMustHire, Model.IsIncludeAverage, Model.IsIncludeReject };
    var labels = new string[] { "hide-unseen", "hide-musthire", "hide-average", "hide-reject" };
    int added = 0;
    for (int i = 0; i < labels.Length; i++)
    {
        if (values[i] == false)
        {
            if (added == 0)
            {
                query += "?";
            }

            query += labels[i] + "&";
            added += 1;
        }
    }
    if (added > 0)
    {
        // remove last &
        query = query.Remove(query.Length - 1);
    }

    var viewQueryCurrentPage = new { 
        offerId = Model.OfferCard.Id, 
        page = Model.Page
    };
    var viewQueryNextPage = viewQueryCurrentPage with { page = Model.Page + 1 };
    var viewQueryPreviousPage = viewQueryCurrentPage with { page = Model.Page - 1 };
}

<div class="container-xl px-4 mt-4">

    <!-- Account page navigation-->
    @await Html.PartialAsync("./ProfileTabs/_CompanyProfileTabs")

    <div class="mb-5 card">
        <div class="card-header">
            Job offer (views: @Model.TotalViewsCount, total applications: @Model.TotalApplications)
        </div>
        @await Html.PartialAsync("./JobOffers/_JobOffer", offerCard)
    </div>

    <div class="card flex-grow-1">
        <div class="card-header d-flex flex-row justify-content-between align-items-center">
            <div class="d-flex flex-row">
                <div class="d-flex flex-row justify-content-center align-content-center me-3">
                    <div class="d-flex flex-column justify-content-center me-1">
                        Date
                    </div>
                    <div>
                        <i class="d-flex flex-column justify-content-end bi bi-caret-up" style="font-size: 0.75rem;"></i>
                        <i class="d-flex flex-column justify-content-start bi bi-caret-down" style="font-size: 0.75rem;"></i>
                    </div>
                </div>
                <div class="d-flex flex-row justify-content-center align-content-center me-3">
                    <div class="d-flex flex-column justify-content-center me-1">
                        Relevenancy
                    </div>
                    <div>
                        <i class="d-flex flex-column justify-content-end bi bi-caret-up" style="font-size: 0.75rem;"></i>
                        <i class="d-flex flex-column justify-content-start bi bi-caret-down" style="font-size: 0.75rem;"></i>
                    </div>
                </div>
                <div class="d-flex flex-row justify-content-center align-content-center me-3">
                    <div class="d-flex flex-column justify-content-center me-1">
                        Alphabetically
                    </div>
                    <div>
                        <i class="d-flex flex-column justify-content-end bi bi-caret-up" style="font-size: 0.75rem;"></i>
                        <i class="d-flex flex-column justify-content-start bi bi-caret-down" style="font-size: 0.75rem;"></i>
                    </div>
                </div>
            </div>
            <div class="d-flex flex-row">
                <div class="form-check form-switch me-3">
                    <input id="show-unseen-toggle" class="form-check-input" type="checkbox" @(Model.IsIncludeUnseen ? "checked" : string.Empty)>
                    <label class="form-check-label" for="show-unseen-toggle">Unseen</label>
                </div>
                <div class="form-check form-switch me-3">
                    <input id="show-musthire-toggle" class="form-check-input" type="checkbox" @(Model.IsIncludeMustHire ? "checked" : string.Empty)>
                    <label class="form-check-label" for="show-musthire-toggle"><i class="bi bi-star"></i></label>
                </div>
                <div class="form-check form-switch me-3">
                    <input id="show-average-toggle" class="form-check-input" type="checkbox" @(Model.IsIncludeAverage ? "checked" : string.Empty)>
                    <label class="form-check-label" for="show-average-toggle"><i class="bi bi-question-lg"></i></label>
                </div>
                <div class="form-check form-switch me-3">
                    <input id="show-reject-toggle"class="form-check-input" type="checkbox" @(Model.IsIncludeReject ? "checked" : string.Empty)>
                    <label class="form-check-label" for="show-reject-toggle"><i class="bi bi-x-lg"></i></label>
                </div>
                <div>
                    Found: @Model.AfterFiltersApplications
                </div>
            </div>
        </div>
        <div class="bg-info bg-opacity-10">
            @if (applicationCards != null && applicationCards.Count > 0)
            {
                @foreach (var card in applicationCards)
                {
                    <div class="mb-2 mx-2 my-2 card border-0 border rounded">
                        @await Html.PartialAsync("./JobOffers/_ApplicationCard", card)
                    </div>
                }
            }
        </div>
        @if (Model.TotalApplications > 10)
        {
            <div>
                <ul class="pagination m-0">
                    <li class="page-item rounded-0 @(Model.Page == 1 ? "disabled" : string.Empty)">
                        <a class="page-link rounded-0" href="@Url.Action("Applications", viewQueryPreviousPage)@query">&laquo;</a>
                    </li>
                    @{
                        int pageSize = 10;
                        int pagesCount = (int)Math.Ceiling((float)Model.TotalApplications / pageSize);
                    }
                    @for (int i = 1; i <= pagesCount; i++)
                    {
                        <li class="page-item @(Model.Page == i ? "active" : string.Empty)">
                            <a class="page-link" href="@Url.Action("Applications", (viewQueryCurrentPage with { page = i }))@query">@i</a>
                        </li>
                    }
                    <li class="page-item rounded-0 @(Model.Page == pagesCount ? "disabled" : string.Empty)">
                        <a class="page-link rounded-0" href="@Url.Action("Applications", viewQueryNextPage)@query">&raquo;</a>
                    </li>
                </ul>
            </div>
        }
    </div>
</div>

<script>
    const showUnseenToggle = document.getElementById("show-unseen-toggle");
    const showMustHireToggle = document.getElementById("show-musthire-toggle");
    const showAverageToggle = document.getElementById("show-average-toggle");
    const showRejectToggle = document.getElementById("show-reject-toggle");

    showUnseenToggle.addEventListener("change", (event) => {
        location.href = buildUrlWithQuery()
    });

    showMustHireToggle.addEventListener("change", (event) => {
        location.href = buildUrlWithQuery()
    });

    showAverageToggle.addEventListener("change", (event) => {
        location.href = buildUrlWithQuery()
    });

    showRejectToggle.addEventListener("change", (event) => {
        location.href = buildUrlWithQuery()
    });

    function buildUrlWithQuery()
    {
        const isShowUnseen = showUnseenToggle.checked;
        const isShowMustHire = showMustHireToggle.checked;
        const isShowAverage = showAverageToggle.checked;
        const isShowReject = showRejectToggle.checked;

        let query = ""

        const values = [isShowUnseen, isShowMustHire, isShowAverage, isShowReject]
        const labels = ["hide-unseen", "hide-musthire", "hide-average", "hide-reject"]
        let added = 0;
        for (let i = 0; i < labels.length; i++) 
        {
            if (values[i] == false)
            {
                if (added == 0)
                {
                    query += "?";
                }

                query += labels[i] + "&";
                added += 1;
            }
        }
        if (added > 0)
        {
            // remove last &
            query = query.slice(0, -1)
        }

        var url = '@Url.Action("Applications", (viewQueryCurrentPage))' + query

        return url;
    }
</script>