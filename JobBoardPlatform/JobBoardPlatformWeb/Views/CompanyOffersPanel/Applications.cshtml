@using JobBoardPlatform.PL.ViewModels.OfferViewModels.Company;

@model CompanyApplicationsViewModel
@{
    var offerCard = Model.OfferCard;
    var applicationCards = Model.Applications;
}

<div class="container-xl px-4 mt-4">

    <!-- Account page navigation-->
    @await Html.PartialAsync("./ProfileTabs/_CompanyProfileTabs")

    <div class="mb-5 card">
        <div class="card-header">
            Job offer (views: @Model.TotalViewsCount, total applications: @Model.TotalApplications)
        </div>
        @await Html.PartialAsync("./JobOffers/_JobOffer", offerCard)
    </div>

    <div class="card flex-grow-1">
        <div class="card-header d-flex flex-row justify-content-between align-items-center">
            <div>
                Applicants (current: @Model.AfterFiltersApplications)
            </div>
            <div class="d-flex flex-row">
                <div class="d-flex flex-row justify-content-center align-content-center me-3">
                    <div class="d-flex flex-column justify-content-center me-1">
                        Date
                    </div>
                    <div>
                        <i class="d-flex flex-column justify-content-end bi bi-caret-up" style="font-size: 0.75rem;"></i>
                        <i class="d-flex flex-column justify-content-start bi bi-caret-down" style="font-size: 0.75rem;"></i>
                    </div>
                </div>
                <div class="d-flex flex-row justify-content-center align-content-center me-3">
                    <div class="d-flex flex-column justify-content-center me-1">
                        Relevenancy
                    </div>
                    <div>
                        <i class="d-flex flex-column justify-content-end bi bi-caret-up" style="font-size: 0.75rem;"></i>
                        <i class="d-flex flex-column justify-content-start bi bi-caret-down" style="font-size: 0.75rem;"></i>
                    </div>
                </div>
                <div class="d-flex flex-row justify-content-center align-content-center me-3">
                    <div class="d-flex flex-column justify-content-center me-1">
                        Alphabetically
                    </div>
                    <div>
                        <i class="d-flex flex-column justify-content-end bi bi-caret-up" style="font-size: 0.75rem;"></i>
                        <i class="d-flex flex-column justify-content-start bi bi-caret-down" style="font-size: 0.75rem;"></i>
                    </div>
                </div>
            </div>
            <div class="d-flex flex-row">
                <div class="form-check form-switch me-3">
                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked-unseen" checked="">
                    <label class="form-check-label" for="flexSwitchCheckChecked-unseen">Unseen</label>
                </div>
                <div class="form-check form-switch me-3">
                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked-mustHire" checked="">
                    <label class="form-check-label" for="flexSwitchCheckChecked-mustHire"><i class="bi bi-star"></i></label>
                </div>
                <div class="form-check form-switch me-3">
                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked-average" checked="">
                    <label class="form-check-label" for="flexSwitchCheckChecked-average"><i class="bi bi-question-lg"></i></label>
                </div>
                <div class="form-check form-switch me-3">
                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked-reject" checked="">
                    <label class="form-check-label" for="flexSwitchCheckChecked-reject"><i class="bi bi-x-lg"></i></label>
                </div>
            </div>
        </div>
        <div class="bg-dark bg-opacity-10">
            @if (applicationCards != null && applicationCards.Count > 0)
            {
                @foreach (var card in applicationCards)
                {
                    <div class="mb-2 my-2 card">
                        @await Html.PartialAsync("./JobOffers/_ApplicationCard", card)
                    </div>
                }
            }
        </div>
        @if (Model.TotalApplications > 10)
        {
            <div>
                <ul class="pagination">
                    <li class="page-item @(Model.Page == 1 ? "disabled" : string.Empty)">
                        <a class="page-link" href="@Url.Action("Applications", new { offerId = Model.OfferCard.Id, page = Model.Page-1 })">&laquo;</a>
                    </li>
                    @{
                        int pageSize = 10;
                        int pagesCount = (int)Math.Ceiling((float)Model.TotalApplications / pageSize);
                    }
                    @for (int i = 1; i <= pagesCount; i++)
                    {
                        <li class="page-item @(Model.Page == i ? "active" : string.Empty)">
                            <a class="page-link" href="@Url.Action("Applications", new { offerId = Model.OfferCard.Id, page = i })">@i</a>
                        </li>
                    }
                    <li class="page-item @(Model.Page == pagesCount ? "disabled" : string.Empty)">
                        <a class="page-link" href="@Url.Action("Applications", new { offerId = Model.OfferCard.Id, page = Model.Page+1 })">&raquo;</a>
                    </li>
                </ul>
            </div>
        }
    </div>
</div>