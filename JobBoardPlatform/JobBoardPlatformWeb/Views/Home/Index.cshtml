@using JobBoardPlatform.BLL.Search.Offers;

@model OffersMainPageViewModel
@{
    ViewData["Title"] = "Home Page";

    var offers = Model.OffersContainer;
    var search = Model.OfferSearchData;

    string refreshCards = @Url.Action("RefreshCardContainer");
}

<div class="container px-5 pt-4">
    <div class="d-flex flex-column px-5">
        <div class="mb-3">
            <div class="row">
                <div class="input-group mb-3">
                    <span class="input-group-text"><i class="bi bi-search"></i></span>
                    <input id="searchField" type="text" class="form-control" placeholder="Search e.g. skill, location, company" value="@search.SearchString">
                    <button class="btn btn-primary" type="button"
                            onclick="@($"searchWithKeywords('{OfferSearchUrlParameters.SearchString}');")">
                        Search
                    </button>
                </div>
            </div>
            <div class="d-flex justify-content-center align-content-center">
                @await Html.PartialAsync("./JobOffers/_MainTechnologiesWidgets", Model)
            </div>
        </div>

        <div class="d-flex flex-row px-4">
            <ul class="nav nav-tabs flex-grow-1 border-0">
                <li class="nav-item">
                    <a class="nav-link @(search.Type == OfferType.Employment ? "active" : string.Empty)"
                       href="@Url.Action("Index", new { area = "", route = "" })">
                        Employment
                        @if (search.Type == OfferType.Employment)
                        {
                            <small id="recordsCount" class="ms-3">
                                @Model.OffersContainer.RecordsCount offers
                            </small>
                        }
                    </a>
                </li>
                <li class="nav-item px-5">
                    <a class="nav-link @(search.Type == OfferType.Commission ? "active" : string.Empty)"
                       href="/commissions">
                       Commissions
                        @if (search.Type == OfferType.Commission)
                        {
                            <small id="recordsCount" class="ms-3">
                                @Model.OffersContainer.RecordsCount offers
                            </small>
                        }
                   </a>
                </li>
            </ul>
            <div class="form-check form-switch align-self-center mx-4">
                <label class="form-check-label" for="remoteSwitchBox")>Remote</label>
                <input class="form-check-input" type="checkbox" id="remoteSwitchBox" style="transform: scale(1.25);"
                       onchange="@($"toggleFilter('{OfferSearchUrlParameters.RemoteOnly}', this);")" @(search.IsRemoteOnly ? "checked" : string.Empty)>
            </div>
            <div class="form-check form-switch align-self-center">
                <label class="form-check-label" for="withSalarySwitchBox">With salary</label>
                <input class="form-check-input" type="checkbox" id="withSalarySwitchBox" style="transform: scale(1.25);"
                       onchange="@($"toggleFilter('{OfferSearchUrlParameters.SalaryOnly}', this);")" @(search.IsSalaryOnly ? "checked" : string.Empty)>
            </div>
        </div>

        <hr class="mt-0 mb-0">

        <div id="cards-container">
            @await Html.PartialAsync("./Templates/_CardsContainer", offers)
        </div>
    </div>
</div>

<script>
    const widgetFieldClass = "widgetField";
    const fieldTypeAttributeName = "fieldtype";

    const fieldsCountId = "recordsCount";
    const fieldsCountLabel = document.getElementById(fieldsCountId);
    const containerRecordsId = "containerRecords";
    const containerRecordsAttribute = "count";
    const searchFieldId = "searchField";

    addWidgetsListeners();

    function addWidgetsListeners() {
        const paramName = @Html.Raw(Json.Serialize(OfferSearchUrlParameters.Technology));

        var mainTechnologyWidgets = document.getElementsByClassName(widgetFieldClass);
        for (var i = 0; i < mainTechnologyWidgets.length; i++) {

            const widget = mainTechnologyWidgets[i];

            widget.addEventListener("click", function () {
                const type = widget.getAttribute(fieldTypeAttributeName).toLowerCase();
                switchMainTechnology(paramName, type);
            });

        }
    }

    function searchWithKeywords(paramName) {
        var searchField = document.getElementById(searchFieldId);
        const value = searchField.value;

        updateQueryStringParameter(paramName, value);

        refreshCards();
    }

    function switchMainTechnology(paramName, type) {

        updateQueryStringParameter(paramName, type);

        refreshCards();
    }

    function toggleFilter(paramName, filter) {
        const isSet = filter.checked;
        updateQueryStringParameter(paramName, isSet);

        refreshCards();
    }

    function switchOfferType(type) {

        // Employment and commission types

        refreshCards();
    }

    function refreshCards() {
        const viewModel = @Html.Raw(Json.Serialize(Model));

        const searchParams = new URLSearchParams(window.location.search)
        let refreshCards = @Html.Raw(Json.Serialize(refreshCards));
        refreshCards += '?' + searchParams.toString();

        sendAjaxAndUpdateTable(refreshCards, viewModel, updateOffersCount);
    }

    function updateQueryStringParameter(key, value) {
        if ('URLSearchParams' in window) {
            var searchParams = new URLSearchParams(window.location.search)
            var newRelativePathQuery = window.location.pathname;

            if (value) {
                searchParams.set(key, value);
                newRelativePathQuery += '?' + searchParams.toString();
            }
            else {
                searchParams.delete(key);
                if (Array.from(searchParams).length > 0) {
                    newRelativePathQuery += '?' + searchParams.toString();
                }
            }

            history.pushState(null, '', newRelativePathQuery);
        }
    }

    function updateOffersCount() {
        const containerRecords = document.getElementById(containerRecordsId);
        const recordsCount = containerRecords.getAttribute(containerRecordsAttribute);
        fieldsCountLabel.innerHTML = `${recordsCount} offers`;
    }
</script>