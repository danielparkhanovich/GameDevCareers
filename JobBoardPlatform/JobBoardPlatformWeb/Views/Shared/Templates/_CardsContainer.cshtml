@using JobBoardPlatform.BLL.Search;
@using JobBoardPlatform.BLL.Search.Enums;
@using JobBoardPlatform.PL.ViewModels.Models.Templates;

@model CardsContainerViewModel
@{
    var header = Model.Header;
    var searchParams = Model.SearchParams;
    var sort = searchParams.Sort;
}

<div class="card border-0 rounded-0 flex-grow-1">
    @if (header != null)
    {
        <div class="card-header border-bottom d-flex flex-row justify-content-between align-items-center bg-light">
            <!-- Sorting -->
            <div class="d-flex flex-row">
                @for (int i = 0; i < header.SortLabels.Length; i++)
                {
                    <div class="d-flex flex-row justify-content-center align-content-center me-3 @(searchParams.SortCategory != header.SortValues[i] ? "text-muted" : string.Empty)">
                        <div class="d-flex flex-column justify-content-center me-1"
                        onclick="sortRecords('@(header.SortValues[i])');">
                            @header.SortLabels[i]
                        </div>
                        @if (searchParams.SortCategory == header.SortValues[i])
                        {
                            <i class="d-flex flex-column justify-content-center
                            @(searchParams.Sort == SortType.Ascending ? "bi bi-arrow-up" : "bi bi-arrow-down")" style="font-size: 1rem;"></i>
                        }
                        else
                        {
                            <i class="d-flex flex-column justify-content-center bi bi-arrow-down-up" style="font-size: 1rem;"></i>
                        }
                    </div>
                }
            </div>
            <!-- Filtering -->
            <div class="d-flex flex-row">
                @for (int i = 0; i < header.FilterLabels.Length; i++)
                {
                    <div class="form-check form-switch me-3">
                        <input id="@($"filter-toggle-{i}")" class="form-check-input" type="checkbox" @(searchParams.FilterToggles[i] ? "checked" : string.Empty) onchange="filterRecords(this, @i);">
                        <label class="form-check-label" for="@($"filter-toggle-{i}")">@Html.Raw(header.FilterLabels[i])</label>
                    </div>
                }
                <div class="text-end pe-1" style="width:100px;">
                Found: @Model.RecordsCount
                </div>
            </div>
        </div>
    }
    <div id="containerRecords" count="@Model.RecordsCount" class="bg-info bg-opacity-10">
        @if (Model.ContainerCards != null && Model.ContainerCards.Count > 0)
        {
            @foreach (var card in Model.ContainerCards)
            {
                <div class="mx-2 my-2 card border-0">
                    @await Html.PartialAsync(card.PartialView, card)
                </div>
            }
        }
    </div>
    @if (Model.RecordsCount > searchParams.PageSize)
    {
        <div>
            <ul class="pagination m-0">
                <li class="page-item rounded-0 @(searchParams.Page == 1 ? "disabled" : string.Empty)">
                    <button class="page-link rounded-0" onclick="switchPage(@searchParams.Page - 1);">&laquo;</button>
                </li>
                @{
                    int pagesCount = (int)Math.Ceiling((float)Model.RecordsCount / Model.SearchParams.PageSize);
                }
                @for (int i = 1; i <= pagesCount; i++)
                {
                    <li class="page-item @(searchParams.Page == i ? "active" : string.Empty)">
                        <button class="page-link" onclick="switchPage(@i);">@i</button>
                    </li>
                }
                <li class="page-item rounded-0 @(searchParams.Page == pagesCount ? "disabled" : string.Empty)">
                    <button class="page-link rounded-0" onclick="switchPage(@searchParams.Page + 1);">&raquo;</button>
                </li>
            </ul>
        </div>
    }
</div>

@await Html.PartialAsync("./Templates/_UpdateContainerAjaxRequestScript")

<script>

    function filterRecords(paramName, toggle) {
        const isChecked = toggle.checked;
        updateQueryStringParameter(paramName, isChecked);
        refreshCards();
    }

    function sortRecords(sortCategory) {
        const sortCategoryParamName = @Html.Raw(Json.Serialize(OfferSearchUrlParams.SortCategory));
        updateQueryStringParameter(sortCategoryParamName, sortCategory);

        // invert sort order on double select
        const currentSortCategory = @Html.Raw(Json.Serialize(Model.SearchParams.SortCategory));
        const sortParamName = @Html.Raw(Json.Serialize(OfferSearchUrlParams.Sort));
        if (sortCategory == currentSortCategory)
        {
            const currentSort = @Html.Raw(Json.Serialize(Model.SearchParams.Sort));
            const inverted = 1 - currentSort;
            updateQueryStringParameter(sortParamName, inverted);
        }
        else
        {
            updateQueryStringParameter(sortParamName, 0);
        }

        refreshCards();
    }

    function switchPage(page) {
        const paramName = @Html.Raw(Json.Serialize(OfferSearchUrlParams.Page));
        updateQueryStringParameter(paramName, page);
        refreshCards(null, true);
    }
</script>