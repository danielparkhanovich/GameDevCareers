@using JobBoardPlatform.PL.Aspects.DataValidators;
@using JobBoardPlatform.BLL.Common;

@model AttachedResume
@{
    // in case of server side handling, form will be immediately submitted
    bool isPostFormOnChange = false;

    if (ViewData.ContainsKey("IsPostFormOnChange"))
    {
        isPostFormOnChange = (bool)ViewData["IsPostFormOnChange"]!;
    }

    var resume = Model;
    bool isFilePreUploaded = Model != null && (string.IsNullOrEmpty(Model.FileSize) == false);
}

<div class="mb-3">
    <label asp-for="File" class="small mb-1">Upload CV</label>
    <input asp-for="File" id="attachedResume-input" type="file" accept="application/pdf" style="display:none">

    <div id="uploadResumeCard" class="card mb-4 mb-xl-0 border-0 shadow-none"
         style="outline: 2px dashed rgba(232, 232, 232, 1); background-color: rgba(236, 236, 236, 0.1)">

        <div class="card-body d-flex flex-column align-items-center border-0">
            <div class="flex-column align-items-center m-0 p-0" id="client-side-attachedResume-file" style=@(isFilePreUploaded ? "display:flex;" : "display:none;")>
                <a role="button" id="client-side-open-resume-button" target=”_blank” href="">
                    <i class="bi bi-file-earmark-check-fill text-info" style="font-size: 5rem;"></i>
                </a>

                <b id="client-side-fileName">@resume.FileName</b>
                <div id="client-side-fileSize">@resume.FileSize</div>

                <div>
                    <input type="hidden" name="id" value="@resume.ResumeUrl" />
                    @if (isPostFormOnChange)
                    {
                        <button type="button" class="small font-italic text-muted mt-auto border-0 bg-transparent" 
                        onclick="location.href='@Url.Action("DeleteResume")'">
                            <i class="bi bi-x-lg text-primary" style="font-size: 1.5rem;"></i>
                        </button>
                    }
                    else
                    {
                        <input asp-for="ResumeUrl" id="profile-resume-url" value="@resume.ResumeUrl" style="display:none" />

                        <button type="button" class="small font-italic text-muted mt-auto border-0 bg-transparent"
                            onclick="removeClientSideAttachedResume();">
                            <i class="bi bi-x-lg text-primary" id="uploadResumeCardCancel" style="font-size: 1.5rem;"></i>
                        </button>
                    }
                </div>
            </div>

            <div class="flex-column align-items-center m-0 p-0" id="client-side-attachedResume-input" style=@(!isFilePreUploaded ? "display:flex;" : "display:none;")>
                <i class="bi bi-file-earmark-arrow-up" style="font-size: 5rem;"></i>
                <div class="d-flex justify-content-between small font-italic text-muted mb-2">
                    <label asp-for="File" class="custom-file-label">
                        Drag and Drop or <button class="btn btn-primary btn-sm" type="button" id="attachedResume-button">Browse</button>
                    </label>
                </div>
                <div class="small font-italic text-muted mb-2">PDF no larger than @GlobalBLL.Limits.MaximumResumeSizeInMb MB</div>
            </div>
        </div>
    </div>
</div>

<script>
    const fileContainer = document.getElementById("attachedResume-input");
    const attachResumeButton = document.getElementById("attachedResume-button");
    const card = document.getElementById("uploadResumeCard");

    addInputFieldListeners();
    
    const displayFile = document.getElementById("client-side-attachedResume-file");
    const displayInput = document.getElementById("client-side-attachedResume-input");

    let openResumeButton = document.getElementById("client-side-open-resume-button");
    openResumeButton.href = @Json.Serialize(Model.ResumeUrl);

    let isPostFormOnChange = false;

    if (@Json.Serialize(ViewData.ContainsKey("IsPostFormOnChange")))
    {
        isPostFormOnChange = @Json.Serialize(ViewData["IsPostFormOnChange"]);
    }

    function addInputFieldListeners()
    {
        attachResumeButton.addEventListener("click", (e) => {
            fileContainer.click();
        });

        fileContainer.addEventListener("change", function () {
            card.style.backgroundColor = "rgba(236, 236, 236, 0.1)";
            if (isPostFormOnChange) 
            {
                this.form.submit();
            }
            else 
            {
                handleFileUpload();
            }
        });

        card.addEventListener("click", (e) => {
            
            if (e.target.id == "uploadResumeCardCancel") 
            {
                return;
            }
            else if (e.target.id == "attachedResume-button") 
            {
                return;
            }

            if (displayInput.style.display == "flex")
            {
                fileContainer.click();
            }
        });

        card.addEventListener("mouseover", () => {
            if (displayInput.style.display == "flex") {
                card.style.backgroundColor = "rgba(236, 236, 236, 0.6)";
            }
        });

        card.addEventListener("mouseout", () => {
            if (displayInput.style.display == "flex") {
                card.style.backgroundColor = "rgba(236, 236, 236, 0.1)";
            }
        });

        card.addEventListener("dragover", function (event) {
            event.preventDefault();
            card.style.backgroundColor = "rgba(236, 236, 236, 0.6)";
            card.classList.add("dragover");
        });

        card.addEventListener("dragleave", function (event) {
            event.preventDefault();
            card.style.backgroundColor = "rgba(236, 236, 236, 0.1)";
            card.classList.remove("dragover");
        });

        card.addEventListener("drop", function (event) {
            event.preventDefault();
            card.style.backgroundColor = "rgba(236, 236, 236, 0.1)";
            card.classList.remove("dragover");
            fileContainer.files = event.dataTransfer.files;

            if (isPostFormOnChange) 
            {
                fileContainer.form.submit();
            }
            else 
            {
                handleFileUpload();
            }
        });
    }

    // used in case of client-side handling
    function handleFileUpload() 
    {
        var profileResume = document.getElementById('profile-resume-url');
        profileResume.value = null;

        // Get the file input element and the file object
        const file = fileContainer.files[0];

        // Create a FileReader object to read the file contents
        const reader = new FileReader();
        reader.onload = () => {
            // Update the UI to display the file information to the user
            const fileName = document.getElementById('client-side-fileName');
            const fileSize = document.getElementById('client-side-fileSize');

            fileName.innerText = file.name;
            fileSize.innerText = formatFileSize(file.size);

            toggleClientFileFieldView(true);
        };
        reader.readAsDataURL(file);

        function clicked(event) {
            const url = URL.createObjectURL(file);
            const open = window.open(url, '_blank');
        };

        var button = document.getElementById("client-side-open-resume-button");
        button.removeAttribute("href");

        // remove event listeners
        var old_element = button;
        var new_element = old_element.cloneNode(true);
        old_element.parentNode.replaceChild(new_element, old_element);

        // add new
        new_element.addEventListener("click", clicked, false);
    }

    function formatFileSize(bytes) 
    {
        const units = ['b', 'Kb', 'Mb', 'Gb', 'Tb'];
        let size = bytes;
        let i = 0;

        while (size >= 1024 && i < units.length) {
            size /= 1024;
            i++;
        }

        return `${size.toFixed(2)} ${units[i]}`;
    }

    function removeClientSideAttachedResume() 
    {
        fileContainer.files = null;
        fileContainer.value = "";
        toggleClientFileFieldView(false);

        var profileResume = document.getElementById('profile-resume-url');
        profileResume.value = null;
    }

    function toggleClientFileFieldView(isClientUploaded) 
    {
        let displayFileValue = "flex";
        let displayInputValue = "flex";

        if (isClientUploaded)
        {
            displayInputValue = "none";
        }
        else
        {
            displayFileValue = "none";
        }

        displayFile.style.display = displayFileValue;
        displayInput.style.display = displayInputValue;
    }
</script>