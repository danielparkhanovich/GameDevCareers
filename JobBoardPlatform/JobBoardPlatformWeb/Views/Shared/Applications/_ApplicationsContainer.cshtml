@using JobBoardPlatform.DAL.Data.Enums.Sort;
@using JobBoardPlatform.PL.ViewModels.Offer.Company;

@model CompanyApplicationsCardsViewModel
@{
    string refreshApplications = @Url.Action("RefreshApplications");
}

<div class="card flex-grow-1">
    <div class="card-header d-flex flex-row justify-content-between align-items-center">
        <div class="d-flex flex-row">
            <div class="d-flex flex-row justify-content-center align-content-center me-3">
                <div class="d-flex flex-column justify-content-center me-1" onclick="sortRecords(@((int)SortCategoryType.PublishDate));">
                    Date
                </div>
                @if (Model.SortCategory == SortCategoryType.PublishDate)
                {
                    if (Model.SortType == SortType.Descending)
                    {
                        <i class="d-flex flex-column justify-content-center bi bi-arrow-up" style="font-size: 1rem;"></i>
                    }
                    else
                    {
                        <i class="d-flex flex-column justify-content-center bi bi-arrow-down" style="font-size: 1rem;"></i>
                    }
                }
            </div>
            <div class="d-flex flex-row justify-content-center align-content-center me-3">
                <div class="d-flex flex-column justify-content-center me-1" onclick="sortRecords(@((int)SortCategoryType.Relevenacy));">
                    Relevenancy
                </div>
                @if (Model.SortCategory == SortCategoryType.Relevenacy)
                {
                    if (Model.SortType == SortType.Descending)
                    {
                        <i class="d-flex flex-column justify-content-center bi bi-arrow-up" style="font-size: 1rem;"></i>
                    }
                    else
                    {
                        <i class="d-flex flex-column justify-content-center bi bi-arrow-down" style="font-size: 1rem;"></i>
                    }
                }
            </div>
            <div class="d-flex flex-row justify-content-center align-content-center me-3">
                <div class="d-flex flex-column justify-content-center me-1" onclick="sortRecords(@((int)SortCategoryType.Alphabetically));">
                    Alphabetically
                </div>
                @if (Model.SortCategory == SortCategoryType.Alphabetically)
                {
                    if (Model.SortType == SortType.Descending)
                    {
                        <i class="d-flex flex-column justify-content-center bi bi-arrow-up" style="font-size: 1rem;"></i>
                    }
                    else
                    {
                        <i class="d-flex flex-column justify-content-center bi bi-arrow-down" style="font-size: 1rem;"></i>
                    }
                }
            </div>
        </div>
        <div class="d-flex flex-row">
            <div class="form-check form-switch me-3">
                <input id="show-unseen-toggle" class="form-check-input" type="checkbox" @(Model.IsIncludeUnseen ? "checked" : string.Empty) onchange="filterRecords();">
                <label class="form-check-label" for="show-unseen-toggle">Unseen</label>
            </div>
            <div class="form-check form-switch me-3">
                <input id="show-musthire-toggle" class="form-check-input" type="checkbox" @(Model.IsIncludeMustHire ? "checked" : string.Empty) onchange="filterRecords();">
                <label class="form-check-label" for="show-musthire-toggle"><i class="bi bi-star"></i></label>
            </div>
            <div class="form-check form-switch me-3">
                <input id="show-average-toggle" class="form-check-input" type="checkbox" @(Model.IsIncludeAverage ? "checked" : string.Empty) onchange="filterRecords();">
                <label class="form-check-label" for="show-average-toggle"><i class="bi bi-question-lg"></i></label>
            </div>
            <div class="form-check form-switch me-3">
                <input id="show-reject-toggle" class="form-check-input" type="checkbox" @(Model.IsIncludeReject ? "checked" : string.Empty) onchange="filterRecords();">
                <label class="form-check-label" for="show-reject-toggle"><i class="bi bi-x-lg"></i></label>
            </div>
            <div>
                Found: @Model.RecordsCount
            </div>
        </div>
    </div>
    <div class="bg-info bg-opacity-10">
        @if (Model.Applications != null && Model.Applications.Count > 0)
        {
            @foreach (var card in Model.Applications)
            {
                <div class="mb-2 mx-2 my-2 card border-0 border rounded">
                    @await Html.PartialAsync("./JobOffers/_ApplicationCard", card)
                </div>
            }
        }
    </div>
    @if (Model.RecordsCount > 10)
    {
        <div>
            <ul class="pagination m-0">
                <li class="page-item rounded-0 @(Model.Page == 1 ? "disabled" : string.Empty)">
                    <button class="page-link rounded-0" onclick="switchPage(@Model.Page - 1);">&laquo;</button>
                </li>
                @{
                    int pageSize = 10;
                    int pagesCount = (int)Math.Ceiling((float)Model.RecordsCount / pageSize);
                }
                @for (int i = 1; i <= pagesCount; i++)
                {
                    <li class="page-item @(Model.Page == i ? "active" : string.Empty)">
                        <button class="page-link" onclick="switchPage(@i);">@i</button>
                    </li>
                }
                <li class="page-item rounded-0 @(Model.Page == pagesCount ? "disabled" : string.Empty)">
                    <button class="page-link rounded-0" onclick="switchPage(@Model.Page + 1);">&raquo;</button>
                </li>
            </ul>
        </div>
    }
</div>

<script>
    function filterRecords() {

        const showUnseenToggle = document.getElementById("show-unseen-toggle");
        const showMustHireToggle = document.getElementById("show-musthire-toggle");
        const showAverageToggle = document.getElementById("show-average-toggle");
        const showRejectToggle = document.getElementById("show-reject-toggle");

        const isShowUnseen = showUnseenToggle.checked;
        const isShowMustHire = showMustHireToggle.checked;
        const isShowAverage = showAverageToggle.checked;
        const isShowReject = showRejectToggle.checked;

        const viewModel = @Html.Raw(Json.Serialize(Model));
        viewModel.isIncludeUnseen = isShowUnseen;
        viewModel.isIncludeMustHire = isShowMustHire;
        viewModel.isIncludeAverage = isShowAverage;
        viewModel.isIncludeReject = isShowReject;

        viewModel.page = 1;

        const refreshApplications = @Html.Raw(Json.Serialize(refreshApplications));
        sendAjaxAndUpdateTable(refreshApplications, viewModel);
    }

    function sortRecords(sortCategory) {

        const viewModel = @Html.Raw(Json.Serialize(Model));

        if (viewModel.sortType == 1) 
        {
            viewModel.sortType = 0;
        }
        else 
        {
            viewModel.sortType = 1;
        }

        console.log(viewModel.sortCategory);
        console.log(sortCategory);

        if (viewModel.sortCategory != sortCategory)
        {
            viewModel.sortType = 1;
        }

        viewModel.sortCategory = sortCategory;
        viewModel.page = 1;

        const refreshApplications = @Html.Raw(Json.Serialize(refreshApplications));
        sendAjaxAndUpdateTable(refreshApplications, viewModel);
    }

    function switchPage(page) {

        const viewModel = @Html.Raw(Json.Serialize(Model));

        viewModel.page = page;

        const refreshApplications = @Html.Raw(Json.Serialize(refreshApplications));
        sendAjaxAndUpdateTable(refreshApplications, viewModel);
    }

    function sendAjaxAndUpdateTable(url, viewModel) {
        $.ajax({
            url: url,
            method: 'POST',
            data: { cardsViewModel: viewModel },
            success: function (result) {
                const selector = `#applications-container`;
                const element = $(selector);
                element.html(result);
            },
            error: function (xhr, status, error) {
                console.error(status);
                console.error(error);
            }
        });
    }
</script>