@using JobBoardPlatform.DAL.Models.Enums;
@using JobBoardPlatform.PL.ViewModels.Contracts;
@using JobBoardPlatform.PL.ViewModels.Factories.MainTechnologyWidgets;

@model IMainTechnology
@{
    var widgetsFactory = new MainTechnologyWidgetsFactory();
    var widgets = await widgetsFactory.CreateAsync();

    int startFromIndex = 0;
    bool isIncludeAll = (ViewData["Title"] as string == "Home Page");
    if (!isIncludeAll)
    {
        startFromIndex = 1;
    }

    bool isHighlightAllOnAllOption = true;
    int selectedIndex = Model.MainTechnologyType;
}

<div class="d-flex btn-group flex-wrap" data-toggle="buttons">
    @for (int i = startFromIndex; i < widgets.Count; i++)
    {
        <div fieldtype="@widgets[i].Value" class="d-flex flex-column justify-content-center align-items-center radio-button-area widgetField small" onclick="selectField('mainFieldInput_@i')" style="width: 90px;">
            <label asp-for="MainTechnologyType" class="d-flex flex-column align-items-center p-2 text-center mainField" for="option4">
                <div class="overlay" style="width: 4rem; height: 4rem; position: absolute; border-radius: 50%; background-color: rgba(100, 100, 100, 0.5); opacity:0; transition: all 0.3s;
                    z-index:0;"></div>
                <div class="d-flex justify-content-center align-items-center rounded-circle text-white mainFieldImg"
                    style="width: 3rem; height: 3rem; font-size: 1.4rem;
                    background-image: linear-gradient(90deg, rgba(101,101,101,1) 0%, rgba(130,130,130,1) 100%);
                    transition: all 0.2s ease-in-out; z-index:1;">
                    <img src="@widgets[i].IconUri" width="30" height="30" class="text-secondary" style="color:gray;"  />
                </div>
                <div class="small">@widgets[i].Label</div>
            </label>
            <input asp-for="MainTechnologyType" id="mainFieldInput_@i" class="mainFieldInput" type="radio" value="@i"
               style="position: absolute; opacity: 0; pointer-events: none;" />
        </div>
    }
</div>

<script>
    const isHighlightAll = @Html.Raw(Json.Serialize(isHighlightAllOnAllOption));
    const widgets = @Html.Raw(Json.Serialize(widgets));
    const radioButtons = document.getElementsByClassName('mainFieldInput');

    const selected = @Html.Raw(Json.Serialize(selectedIndex));

    selectField(`mainFieldInput_${selected}`);
    //checkTechnologyWidget(radioButtons[selected], +selected);

    function selectField(value) {
        for (let i = 0; i < radioButtons.length; i++) {
            const element = radioButtons[i];
            uncheckTechnologyWidget(element);
        }

        const selectedRadioButton = document.querySelector('#' + value);
        const id = +value.split('_')[1];
        console.log(id);
        if (isHighlightAll && id == 0)
        {
            console.log(id);
            for (let i = 0; i < radioButtons.length; i++) {
                checkTechnologyWidget(radioButtons[i], i);
            }
        }
        else
        {
            checkTechnologyWidget(selectedRadioButton, id);
        }
    }

    function checkTechnologyWidget(element, id) {
        element.checked = true;

        const widgetData = widgets[id];
        const colorFromStr = `rgba(${widgetData.backgroundColorFrom.r},${widgetData.backgroundColorFrom.g},${widgetData.backgroundColorFrom.b},0.8)`;
        const colorToStr = `rgba(${widgetData.backgroundColorTo.r},${widgetData.backgroundColorTo.g},${widgetData.backgroundColorTo.b},0.8)`;

        const label = element.parentElement.querySelector('.mainField');
        const img = label.querySelector('.mainFieldImg');
        img.style.backgroundImage = `linear-gradient(90deg, ${colorFromStr} 0%, ${colorToStr} 100%)`;
    }

    function uncheckTechnologyWidget(element) {
        element.checked = false;

        const label = element.parentElement.querySelector('.mainField');
        const img = label.querySelector('.mainFieldImg');
        img.style.backgroundImage = "linear-gradient(90deg, rgba(101,101,101,1) 0%, rgba(130,130,130,1) 100%)";
    }
</script>