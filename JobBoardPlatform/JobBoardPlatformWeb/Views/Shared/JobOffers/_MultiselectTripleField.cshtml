@model IOfferSalary
@{
    if (Model.EmploymentTypes == null || Model.EmploymentTypes.Length == 0)
    {
        Model.EmploymentTypes = new EmploymentType[] { new EmploymentType() };
    }
}

<div>
    <div id="offer-employment-details-container" class="mb-2">                
        @for (int i = 0; i < Model.EmploymentTypes!.Length; i++)
        {
            <div class="mb-3">
                <div id="offer-employment-details-template">
                    <div class="d-flex flex-row justify-content-between gx-3 offer-employment-details">
                        <div class="flex-grow-1 pe-3">
                            <select asp-for="@Model.EmploymentTypes[i].TypeId" class="form-select h-100" aria-label="Employment type">
                                <option value="0" selected>Employment type <span class="text-danger">*</span></option>
                                <option value="1">Permanent</option>
                                <option value="2">B2B</option>
                                <option value="3">Mandate contract</option>
                            </select>
                        </div>
                        <div class="d-flex flex-row justify-content-center me-3 flex-grow-1">
                            <div class="form-floating flex-grow-1 me-3">
                                <input asp-for="@Model.EmploymentTypes[i].SalaryFromRange" type="text" class="form-control" placeholder="Monthly salary from (gross)">
                                <label asp-for="@Model.EmploymentTypes[i].SalaryFromRange">Monthly salary from (gross)</label>
                            </div>
                            <div class="form-floating flex-grow-1">
                                <input asp-for="@Model.EmploymentTypes[i].SalaryToRange" type="text" class="form-control" placeholder="Monthly salary to (gross)">
                                <label asp-for="@Model.EmploymentTypes[i].SalaryToRange">Monthly salary to (gross)</label>
                            </div>
                        </div>
                        <div>
                            <select asp-for="@Model.EmploymentTypes[i].SalaryCurrencyType" class="form-select h-100" aria-label="Default select example">
                                <option value="0" selected>Currency</option>
                                <option value="1">PLN</option>
                                <option value="2">EUR</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="d-flex flex-column">
                    <span asp-validation-for="@Model.EmploymentTypes[i]" class="text-danger"></span>
                </div>
            </div>
        }
    </div>
    <div class="d-flex flex-column">
        <span asp-validation-for="@Model.EmploymentTypes" class="text-danger"></span>
    </div>
    <button type="button" id="addButton" class="btn btn-outline-primary btn-block mt-2">Add one more employment type</button>
    <button type="button" id="deleteButton" class="d-none btn btn-outline-danger btn-block mt-2">Delete employment type</button>
</div>

<script>
    var employmentTypeContainer = document.getElementById('offer-employment-details-container');
    var deleteButton = document.getElementById('deleteButton');
    deleteButton.addEventListener('click', function () {
        var lastAddedEmploymentType = employmentTypeContainer.lastElementChild;
        console.log("removed " + lastAddedEmploymentType.innerHTML);
        lastAddedEmploymentType.remove();
        setAddDeleteButtonsVisibility();
    });

    var employmentTypeTemplate = document.getElementById('offer-employment-details-template');
    var addButton = document.getElementById('addButton');
    addButton.addEventListener('click', function () {
        addEmploymentField();
    });

    setAddDeleteButtonsVisibility();

    function addEmploymentField()
    {
         // Get the current index of employment items
        var index = document.getElementsByClassName('offer-employment-details').length;

        if (index > 2)
        {
            return;
        }

        // Create new employment container
        var newEmploymentHTML = employmentTypeTemplate.innerHTML;
        newEmploymentHTML = newEmploymentHTML.replaceAll("[0]", "[" + index + "]");

        // Create a temporary element to hold the new HTML
        var tempElement = document.createElement('div');
        tempElement.classList.add("mb-3");
        tempElement.innerHTML = newEmploymentHTML;

        // Append the new employment container to the form
        var newEmploymentContainer = tempElement;
        employmentTypeContainer.appendChild(newEmploymentContainer);

        setAddDeleteButtonsVisibility();
    }

    function setAddDeleteButtonsVisibility()
    {
        const addedTypes = document.getElementsByClassName('offer-employment-details').length;
        if (addedTypes > 2) 
        {
            addButton.classList.add("d-none");
        }
        else
        {
            addButton.classList.remove("d-none");
        }

        if (addedTypes > 1)
        {
            deleteButton.classList.remove("d-none");
        }
        else
        {
            deleteButton.classList.add("d-none");
        }
    }

    function insertAfter(referenceNode, newNode) {
        referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
    }
</script>