@using JobBoardPlatform.PL.ViewModels.Factories.Admin;
@using JobBoardPlatform.PL.ViewModels.Models.Admin;
@using JobBoardPlatform.PL.ViewModels.Models.Offer.Widgets;
@using JobBoardPlatform.BLL.Services.Offer.State;
@using JobBoardPlatform.PL.Controllers.Offer;
@using JobBoardPlatform.PL.Controllers.Templates;

@model CompanyOfferCardViewModel
@{
    var offer = Model;
    int offerId = offer.CardDisplay.Id;

    string applicationsUrl = string.Empty;
    if (offer.ContactType == ContactTypeEnum.ExternalForm.ToString())
    {
        applicationsUrl = offer.ContactAddress!;
    }
    else if (offer.ContactType == ContactTypeEnum.PrivateApplications.ToString())
    {
        applicationsUrl = $"{@Url.Action("Applications", "CompanyApplicationsPanel", new { offerId = offerId, page = 1 })}";
    }

    string editOfferUrl = $"{@Url.Action("NewOffer", "CompanyOfferEditor", new { offerId = offerId })}";
    string hideOfferUrl = $"{@Url.Action(OfferCardsControllerBase.ToggleVisibilityAction)}";
    string closeOfferUrl = $"{@Url.Action(OfferCardsControllerBase.DeleteAction)}";
    string suspendOfferUrl = $"{@Url.Action(OfferCardsControllerBase.ToggleSuspendAction)}";
    string passPaymentOfferUrl = $"{@Url.Action(OfferCardsControllerBase.PassPaymentAction)}";

    bool isAvailableToShelve = offer.IsAvailableForEdit && offer.IsPaid;
    bool isAvailableToEdit = offer.IsAvailableForEdit && !offer.IsDeleted;
}

<div class="my-0">
    <div class="card border-0 shadow-sm">
        <div class="d-flex flex-row mx-0 @(offer.IsVisibleOnMainPage ? null : "bg-dark bg-opacity-10")">
            <div class="col-7 mx-0 px-0">
                @await Html.PartialAsync(Model.CardDisplay.PartialView, Model.CardDisplay)
            </div>
            <div class="d-flex flex-row company-card-view-data w-100 justify-content-between">
                <div>
                    <div class="overflow-hidden h-100 pt-1" style="width:90px;">
                        @{
                            var widget = new MainTechnologyWidgetViewModel();
                            widget.Label = Model.MainTechnology;
                        }
                        @await Html.PartialAsync("./JobOffers/_MainTechnologyStaticWidget", widget)
                    </div>
                </div>
                <div class="d-flex flex-row justify-content-start mx-1 small" style="width:30px;">
                    <i class="bi bi-eye d-flex justify-content-center align-items-center rounded-circle"></i>
                    <div class="d-flex justify-content-center align-items-center ms-1">
                        @offer.TotalViews
                    </div>
                </div>
                <div class="d-flex flex-row justify-content-start me-1 small" style="width:30px;">
                    @if (offer.ContactType == ContactTypeEnum.Mail.ToString())
                    {
                        <i class="bi bi-envelope d-flex justify-content-center align-items-center rounded-circle"></i>
                    }
                    else if (offer.ContactType == ContactTypeEnum.ExternalForm.ToString())
                    {
                        <i class="bi bi-box-arrow-up-right d-flex justify-content-center align-items-center rounded-circle"></i>
                    }
                    else if (offer.ContactType == ContactTypeEnum.PrivateApplications.ToString())
                    {
                        <i class="bi bi-send d-flex justify-content-center align-items-center rounded-circle"></i>
                    }
                    <div class="d-flex justify-content-center align-items-center ms-1">
                        @offer.TotalApplicants
                    </div>
                </div>
                <div class="d-flex align-self-center flex-flex-column justify-content-center h-50 mx-1">
                    @{
                        string text = string.Empty;
                        string img = string.Empty;
                        string color = string.Empty;
                        @if (offer.StateType == OfferStateType.NotPaid)
                        {
                            img = "bi bi-credit-card-2-front-fill";
                            text = "not paid";
                            color = "primary";
                        }
                        else if (offer.StateType == OfferStateType.Visible)
                        {
                            img = "bi bi-check-lg";
                            text = "published";
                            color = "success";
                        }
                        else if (offer.StateType == OfferStateType.Deleted)
                        {
                            img = "bi bi-trash";
                            text = "deleted";
                            color = "danger";
                        }
                        else if (offer.StateType == OfferStateType.Shelved)
                        {
                            img = "bi bi-eye-slash";
                            text = "shelved";
                            color = "warning";
                        }
                        else if (offer.StateType == OfferStateType.Suspended)
                        {
                            img = "bi bi-flag small";
                            text = "suspended";
                            color = "black";
                        }
                    }
                    <div class="rounded-pill border border-@(color) small align-self-center pe-2" style="width: 100px;">
                        <div class="d-flex flex-row justify-content-center align-items-center small">
                            <i class="@(img) ps-2 pe-1 text-@(color) small" style="padding-top: 3px;"></i>
                            <div class="text-@(color)">@(text)</div>
                        </div>
                    </div>
                    <div class="d-flex align-items-center justify-content-center rounded-pill text-@(color) border border-@(color) small align-self-center ms-3 px-2" style="width: 70px;">
                        <small>@Model.DaysLeft</small>
                    </div>
                </div>
            </div>
            <div class="d-flex justify-content-between align-items-center pe-4 ms-3">
                <div class="dropdown">
                    <a class="nav-link dropdown-toggle rounded border border-primary px-2 mb-0 justify-content-center align-self-center" 
                    data-bs-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">
                        <small>more</small>
                    </a>
                    <div class="dropdown-menu py-0">
                        @if (offer.StateType == OfferStateType.NotPaid)
                        {
                            <button class="w-100 d-flex flex-row justify-content-between btn btn-outline-info btn-sm mb-1"
                                onclick="passPaymentOffer(@offerId);">
                                <div>@("Pay for ad")</div>
                                <i class="bi bi-credit-card-2-front-fill ms-1"></i>
                            </button>
                        }
                        @if (offer.StateType != OfferStateType.NotPaid && offer.ContactType == ContactTypeEnum.PrivateApplications.ToString())
                        {
                            <a class="w-100 d-flex flex-row justify-content-between btn btn-outline-primary btn-sm mb-1" href="@applicationsUrl">
                                <div>Applications</div>
                                <i class="bi bi-send ms-1"></i>
                            </a>
                        }
                        @if (isAvailableToEdit)
                        {
                            <a class="w-100 d-flex flex-row justify-content-between btn btn-outline-primary btn-sm" href="@editOfferUrl">
                                <div>Edit</div>
                                <i class="bi bi-pencil-square ms-1"></i>
                            </a>
                        }
                        <button class="w-100 @(isAvailableToShelve ? "d-flex" : "d-none") flex-row justify-content-between btn @(offer.IsShelved ? "btn-outline-info" : "btn-outline-warning") btn-sm mt-1"
                                onclick="shelveOffer(@offerId, @(((!offer.IsShelved).ToString().ToLower())));">
                            @if (!offer.IsShelved)
                            {
                                <div>@("Hide offer")</div>
                                <i class="bi bi-eye-slash ms-1"></i>
                            }
                            else
                            {
                                <div>@("Show offer")</div>
                                <i class="bi bi-eye ms-1"></i>
                            }
                        </button>
                        <button class="w-100 d-flex flex-row justify-content-between btn @(offer.IsDeleted ? "btn-outline-success" : "btn-outline-danger") btn-sm mt-1"
                                onclick="closeOffer(@offerId);">
                            @if (!offer.IsDeleted)
                            {
                                <div>@("Close offer")</div>
                                <i class="bi bi-x-lg ms-1"></i>
                            }
                            else
                            {
                                <div>@("Revert")</div>
                                <i class="bi bi-activity ms-1"></i>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function shelveOffer(cardId, flag) {
        const action = @Html.Raw(Json.Serialize(hideOfferUrl));
        const data = { offerId: cardId, flag: flag };
        refreshCard(action, cardId, data);
    }

    function suspendOffer(cardId, flag) {
        const action = @Html.Raw(Json.Serialize(suspendOfferUrl));
        const data = { offerId: cardId, flag: flag };
        refreshCard(action, cardId, data);
    }

    function passPaymentOffer(cardId) {
        const action = @Html.Raw(Json.Serialize(passPaymentOfferUrl));
        const data = { offerId: cardId };
        refreshCard(action, cardId, data, refreshCards);
    }

    function closeOffer(cardId) {
        const action = @Html.Raw(Json.Serialize(closeOfferUrl));
        const data = { offerId: cardId };
        refreshCard(action, cardId, data, refreshCards);
    }
</script>